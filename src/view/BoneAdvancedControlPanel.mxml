<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  addedToStage="addedToStageHandler(event)"
		  >
	
	<fx:Script>
		<![CDATA[
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ImportDataProxy;
			
			private var _importDataProxy:ImportDataProxy = ImportDataProxy.getInstance();
			
			private function addedToStageHandler(event:Event):void
			{
				sliderScale.addEventListener(Event.CHANGE, valueChangeHandler);
				numScale.addEventListener(Event.CHANGE, valueChangeHandler);
				
				sliderOffset.addEventListener(Event.CHANGE, valueChangeHandler);
				numOffset.addEventListener(Event.CHANGE, valueChangeHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_ANIMATION, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_BONE, commandHandler);
			}
			
			private function commandHandler(e:Message):void
			{
				if(e.parameters[0] != _importDataProxy.armatureProxy)
				{
					return;
				}
				switch(e.type)
				{
					case MessageDispatcher.SELECT_ANIMATION:
					case MessageDispatcher.SELECT_BONE:
						updateScaleAndDelay();
						break;
				}
			}
			
			private function valueChangeHandler(e:Event):void
			{
				switch(e.target)
				{
					case sliderScale:
						numScale.value = sliderScale.value;
					case numScale:
						_importDataProxy.armatureProxy.timelineScale = sliderScale.value = isNaN(numScale.value)?0:numScale.value;
						break;
					case sliderOffset:
						numOffset.value = sliderOffset.value;
					case numOffset:
						_importDataProxy.armatureProxy.timelineOffset = sliderOffset.value = isNaN(numOffset.value)?0:numOffset.value;
						break;
				}
			}
			
			private function updateScaleAndDelay():void
			{
				var isMultipleFrameAnimation:Boolean = _importDataProxy.armatureProxy.isMultipleFrameAnimation;
				
				var timelineScale:Number = _importDataProxy.armatureProxy.timelineScale;
				var timelineOffset:Number = _importDataProxy.armatureProxy.timelineOffset;
				
				if(isMultipleFrameAnimation)
				{
					numScale.enabled = true;
					sliderScale.enabled = true;
					numScale.value = timelineScale;
					sliderScale.value = timelineScale;
					
					numOffset.enabled = true;
					sliderOffset.enabled = true;
					numOffset.value = timelineOffset;
					sliderOffset.value = timelineOffset;
				}
				else
				{
					numScale.enabled = false;
					sliderScale.enabled = false;
					numOffset.enabled = false;
					sliderOffset.enabled = false;
				}
			}
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1"/>
		</s:stroke>
	</s:Rect>
	<s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">
		<s:VGroup width="100%" gap="0" paddingLeft="6" paddingRight="6">
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','totalFramesScale')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderScale" width="100%"
						   minimum="0" maximum="400" snapInterval="5"
						   />
				<s:NumericStepper id="numScale" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="1000" minimum="0" snapInterval="1"
								  />
			</s:HGroup>
			<s:Label width="100%" height="24" verticalAlign="bottom"
					 text="{resourceManager.getString('resources','playDelay')}"
					 />
			<s:HGroup width="100%" verticalAlign="middle">
				<s:HSlider id="sliderOffset" width="100%"
						   minimum="0" maximum="100" snapInterval="5"
						   />
				<s:NumericStepper id="numOffset" width="60" height="24" cornerRadius="0" textAlign="right"
								  maximum="100" minimum="-100" snapInterval="1"
								  />
			</s:HGroup>
		</s:VGroup>
	</s:Scroller>
</s:Group>