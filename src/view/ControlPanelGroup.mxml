<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  xmlns:components="view.components.*"
		  width="100%" height="100%" gap="0"
		  creationComplete="creationCompleteHandler()" xmlns:view="view.*">
	<fx:Script>
		<![CDATA[
			import message.Message;
			import message.MessageDispatcher;
			
			import model.ArmatureProxy;
			import model.ImportDataProxy;
			
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			private var _armatureDataProxy:ArmatureProxy;
			
			protected function creationCompleteHandler():void
			{
				_armatureDataProxy = ImportDataProxy.getInstance().armatureProxy;
				
				boneTree.addEventListener(ListEvent.CHANGE, boneHandler);
				boneTree.addEventListener(DragEvent.DRAG_COMPLETE, boneHandler);
				
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_ARMATURE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.SELECT_BONE, commandHandler);
				MessageDispatcher.addEventListener(MessageDispatcher.CHANGE_BONE_PARENT, commandHandler);		
			}
			
			private function boneHandler(e:Event):void
			{
				switch(e.type)
				{
					case ListEvent.CHANGE:
						var boneXML:XML = boneTree.selectedItem as XML;
						var boneName:String = boneXML?boneXML.@name:"";
						_armatureDataProxy.selectBone(boneName);
						break;
					case DragEvent.DRAG_COMPLETE:
						if(boneTree.lastMoveNode)
						{
							boneName = boneTree.lastMoveNode.@name;
							var parentXML:XML = boneTree.lastMoveNode.parent();
							var parentName:String = parentXML.@name;
							if(parentXML.localName() != boneTree.lastMoveNode.localName())
							{
								parentName = null;
							}
							
							_armatureDataProxy.changeBoneParent(boneName, parentName);
						}
						break;
				}
			}
			
			private function commandHandler(e:Message):void
			{
				if(e.parameters[0] != _armatureDataProxy)
				{
					return;
				}
				switch(e.type)
				{
					case MessageDispatcher.SELECT_ARMATURE:
					case MessageDispatcher.CHANGE_BONE_PARENT:
						for each(var _item:Object in boneTree.dataProvider)
						{
							boneTree.expandChildrenOf(_item, true);
						}
						if(e.type == MessageDispatcher.CHANGE_BONE_PARENT)
						{
							boneTree.selectItemByName(_armatureDataProxy.selectedBoneName);
						}
						break;
					case MessageDispatcher.SELECT_BONE:
						boneTree.selectItemByName(_armatureDataProxy.selectedBoneName);
						break;
				}
			}
			
			protected function behaviorAdvancedSwitch_clickHandler(event:MouseEvent):void
			{
				if(behaviorAdvancedControlPanel.width == 0 )
				{
					behaviorAdvancedControlPanel.width = 150;
					behaviorAdvancedSwitch.label = ">>";
				}
				else
				{
					behaviorAdvancedControlPanel.width = 0;
					behaviorAdvancedSwitch.label = "<<";
				}
			}
			
			protected function boneAdvancedSwitch_clickHandler(event:MouseEvent):void
			{
				if(boneAdvancedControlPanel.width == 0 )
				{
					boneAdvancedControlPanel.width = 150;
					boneAdvancedSwitch.label = ">>";
				}
				else
				{
					boneAdvancedControlPanel.width = 0;
					boneAdvancedSwitch.label = "<<";
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<mx:VDividedBox width="100%" height="100%">
		<s:VGroup width="100%" height="100%" gap="-1">
			<s:HGroup width="100%" gap="-1">
				<s:Button width="100%" height="24" label="{resourceManager.getString('resources','behaviorList')}"
						  cornerRadius="0" fontWeight="bold"/>
				<s:Button id="behaviorAdvancedSwitch" width="35" height="24" label="&lt;&lt;"
						  cornerRadius="0" click="behaviorAdvancedSwitch_clickHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%" height="100%" gap="-1">
				<s:List minWidth="110" width="100%" height="100%" borderColor="#000000"
						labelField="name"
						dataProvider="{ImportDataProxy.getInstance().armatureProxy.animationsAC}"
						selectedItem ="@{ImportDataProxy.getInstance().armatureProxy.selecteAnimationData}"
						/>
				<view:BehaviorAdvancedControlPanel id="behaviorAdvancedControlPanel" width="0" height="100%"/>
			</s:HGroup>
		</s:VGroup>
		<s:VGroup width="100%" height="100%" gap="-1">
			<s:HGroup width="100%" gap="-1">
				<s:Button width="100%" height="24" label="{resourceManager.getString('resources','boneTree')}"
					  cornerRadius="0" fontWeight="bold"/>
				<s:Button id="boneAdvancedSwitch" width="35" height="24" label="&lt;&lt;"
						  cornerRadius="0" click="boneAdvancedSwitch_clickHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%" height="100%" gap="-1">
				<components:DragTree id="boneTree" minWidth="110" width="100%" height="100%"
									 textSelectedColor="#CCCCCC" textRollOverColor="#CCCCCC"
									 dropEnabled="true" dragEnabled="true"
									 labelField="@name"
									 dataProvider="{ImportDataProxy.getInstance().armatureProxy.bonesMC}"
									 />
				<view:BoneAdvancedControlPanel id="boneAdvancedControlPanel" width="0" height="100%"/>
			</s:HGroup>
		</s:VGroup>
	</mx:VDividedBox>
</s:VGroup>
